# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: gh-pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Runs every Monday
  schedule:
    - cron: 0 0 * * 1

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write # <-- changed from read to write to allow committing cache
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      SERPAPI_API_KEY: ${{ secrets.SERPAPI_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'true' # Allows to clone CV.tex as submodule and use its main.bib file
          fetch-depth: 0 # <-- added: full history needed for committing

      - name: Update CV.tex submodule
        run: |
          git pull --recurse-submodules
          git submodule update --remote --recursive

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          # ruby-version: '3.3' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --trace --future --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Commit updated scholar cache
        # Commits the updated .scholar_cache/scholar_data.json back to the repository
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -f ".scholar_cache/scholar_data.json" ]; then
            git add .scholar_cache/scholar_data.json
            git commit -m "Update scholar_data.json from CI [skip ci]" || echo "No changes to commit"
            git push
          else
            echo "No cache file found to commit."
          fi

      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
